}
##########
set.seed(1234567890)
d =5
z = matrix(rnorm(d^d),d,d)
X = z + t(z)
# X
eigen_fun(X)
eigen(X)
Rlocal <- function(A){
d = ncol(X)
R <- A
Q <- diag(1,d,d,FALSE)
for (i in 1:(d-1)) {
col_x <- matrix(rep(0,d),nrow = d)
col_x[i:d] <- R[i:d,i]
V <- col_x
V[i] <- col_x[i]+norm(X,"F")*sign(col_x[i])
Xlocal <- V/norm(V,"F")
R <- R-2*(Xlocal%*%t(Xlocal)%*%R)
Q <- Q-2*(Xlocal%*%t(Xlocal)%*%Q)
}
return(list("Q" = t(Q), "R" = R))
}
eigen_fun <- function(X, numIter = 10000){
d = ncol(X)
U = diag(1,d,d,FALSE)
for (i in 1:numIter) {
QR <- Rlocal(U) # i times
Q = QR$Q
R = QR$R
U = X %*% Q
}
values = diag(R)
sorted_values = sort(values,index.return=TRUE,decreasing=TRUE)
values = sorted_values$x
vectors = Q[,sorted_values$ix]
return(list(values=values, vectors= -vectors))
}
eigen_fun(X)
eigen(X)
##########
set.seed(1234567890)
d =4
z = matrix(rnorm(d^d),d,d)
X = z + t(z)
# X
##########
set.seed(1234567890)
d =4
z = matrix(rnorm(d^d),d,d)
X = z + t(z)
Rlocal <- function(A){
d = ncol(X)
R <- A
Q <- diag(1,d,d,FALSE)
for (i in 1:(d-1)) {
col_x <- matrix(rep(0,d),nrow = d)
col_x[i:d] <- R[i:d,i]
V <- col_x
V[i] <- col_x[i]+norm(X,"F")*sign(col_x[i])
Xlocal <- V/norm(V,"F")
R <- R-2*(Xlocal%*%t(Xlocal)%*%R)
Q <- Q-2*(Xlocal%*%t(Xlocal)%*%Q)
}
return(list("Q" = t(Q), "R" = R))
}
eigen_fun <- function(X, numIter = 10000){
d = ncol(X)
U = diag(1,d,d,FALSE)
for (i in 1:numIter) {
QR <- Rlocal(U) # i times
Q = QR$Q
R = QR$R
U = X %*% Q
}
values = diag(R)
sorted_values = sort(values,index.return=TRUE,decreasing=TRUE)
values = sorted_values$x
vectors = Q[,sorted_values$ix]
return(list(values=values, vectors= -vectors))
}
eigen_fun(X)
eigen(X)
##########
set.seed(1234567890)
d =4
z = matrix(rnorm(d^d),d,d)
X = z + t(z)
# X
Rlocal <- function(A){
d = ncol(X)
R <- A
Q <- diag(1,d,d,FALSE)
for (i in 1:(d-1)) {
col_x <- matrix(rep(0,d),nrow = d)
col_x[i:d] <- R[i:d,i]
V <- col_x
V[i] <- col_x[i]+norm(X,"F")*sign(col_x[i])
Xlocal <- V/norm(V,"F")
R <- R-2*(Xlocal%*%t(Xlocal)%*%R)
Q <- Q-2*(Xlocal%*%t(Xlocal)%*%Q)
}
return(list("Q" = t(Q), "R" = R))
}
eigen_fun <- function(X, numIter = 10000){
d = ncol(X)
U = diag(1,d,d,FALSE)
for (i in 1:numIter) {
QR <- Rlocal(U) # i times
Q = QR$Q
R = QR$R
U = X %*% Q
}
values = diag(R)
sorted_values = sort(values,index.return=TRUE,decreasing=TRUE)
values = sorted_values$x
vectors = Q[,sorted_values$ix]
return(list(values=values, vectors= -vectors))
}
eigen_fun(X)
eigen(X)
##########
set.seed(1234567890)
d =3
z = matrix(rnorm(d^d),d,d)
X = z + t(z)
# X
d =3
z = matrix(rnorm(d^d),d,d)
X = z + t(z)
eigen_fun(X)
eigen(X)
##########
set.seed(1234567890)
d =4
z = matrix(rnorm(d^d),d,d)
X = z + t(z)
Rlocal <- function(A){
d = ncol(X)
R <- A
Q <- diag(1,d,d,FALSE)
for (i in 1:(d-1)) {
col_x <- matrix(rep(0,d),nrow = d)
col_x[i:d] <- R[i:d,i]
V <- col_x
V[i] <- col_x[i]+norm(X,"F")*sign(col_x[i])
U <- V/norm(V,"F")
R <- R-2*(U%*%t(U)%*%R)
Q <- Q-2*U%*%t(U)%*%Q
}
return(list("Q" = t(Q), "R" = R))
}
eigen_fun <- function(X, numIter = 1000){
d = ncol(X)
U = diag(1,d,d,FALSE)
for (i in 1:numIter) {
QR <- Rlocal(U) # i times
Q = QR$Q
R = QR$R
U = X %*% Q
}
values = diag(R)
sorted_values = sort(values,index.return=TRUE,decreasing=TRUE)
values = sorted_values$x
vectors = Q[,sorted_values$ix]
return(list(values=values, vectors= -vectors))
}
eigen_fun(X)
eigen(X)
d =3
z = matrix(rnorm(d^d),d,d)
X = z + t(z)
Rlocal <- function(A){
d = ncol(X)
R <- A
Q <- diag(1,d,d,FALSE)
for (i in 1:(d-1)) {
X <- matrix(rep(0,d),nrow = d)
X[i:d] <- R[i:d,i]
V <- X
V[i] <- X[i]+norm(X,"F")*sign(X[i])
U <- V/norm(V,"F")
R <- R-2*(U%*%t(U)%*%R)
Q <- Q-2*U%*%t(U)%*%Q
}
return(list("Q" = t(Q), "R" = R))
}
eigen_fun <- function(X, numIter = 1000){
d = ncol(X)
U = diag(1,d,d,FALSE)
for (i in 1:numIter) {
QR <- Rlocal(U)
Q = QR$Q
R = QR$R
U = X %*% Q
}
values = diag(R)
sorted_values = sort(values,index.return=TRUE,decreasing=TRUE)
values = sorted_values$x
vectors = Q[,sorted_values$ix]
return(list(values=values, vectors= -vectors))
}
eigen_fun(X)
eigen(X)
##########
set.seed(1234567890)
d =3
z = matrix(rnorm(d^d),d,d)
X = z + t(z)
eigen_fun(X)
eigen(X)
##########
set.seed(1234567890)
d =3
z = matrix(rnorm(d^d),d,d)
X = z + t(z)
eigen_fun(X)
Rlocal <- function(A){
d = ncol(X)
R <- A
Q <- diag(1,d,d,FALSE)
for (i in 1:(d-1)) {
X <- matrix(rep(0,d),nrow = d)
X[i:d] <- R[i:d,i]
V <- X
V[i] <- X[i]+norm(X,"F")*sign(X[i])
xlocal <- V/norm(V,"F")
R <- R-2*(xlocal%*%t(xlocal)%*%R)
Q <- Q-2*(xlocal%*%t(xlocal)%*%Q)
}
return(list("Q" = t(Q), "R" = R))
}
eigen_fun <- function(X, numIter = 1000){
d = ncol(X)
U = diag(1,d,d,FALSE)
for (i in 1:numIter) {
QR <- Rlocal(U)
Q = QR$Q
R = QR$R
U = X %*% Q
}
values = diag(R)
sorted_values = sort(values,index.return=TRUE,decreasing=TRUE)
values = sorted_values$x
vectors = Q[,sorted_values$ix]
return(list(values=values, vectors= -vectors))
}
eigen_fun(X)
eigen(X)
d =4
z = matrix(rnorm(d^d),d,d)
X = z + t(z)
##########
set.seed(1234567890)
d =4
z = matrix(rnorm(d^d),d,d)
X = z + t(z)
eigen_fun(X)
eigen(X)
##########
set.seed(1234567890)
d =5
z = matrix(rnorm(d^d),d,d)
X = z + t(z)
eigen_fun(X)
eigen(X)
Rlocal <- function(A){
d = ncol(X)
R <- A
Q <- diag(1,d,d,FALSE)
for (i in 1:(d-1)) {
X <- matrix(rep(0,d),nrow = d)
X[i:d] <- R[i:d,i]
V <- X
V[i] <- X[i]+norm(X,"F")*sign(X[i])
xlocal <- V/norm(V,"F")
R <- R-2*(xlocal%*%t(xlocal)%*%R)
Q <- Q-2*(xlocal%*%t(xlocal)%*%Q)
}
return(list("Q" = t(Q), "R" = R))
}
eigen_fun <- function(X, numIter = 1000){
d = ncol(X)
U = diag(1,d,d,FALSE)
for (i in 1:numIter) {
QR <- Rlocal(U)
Q = QR$Q
R = QR$R
U = X %*% Q
}
values = diag(R)
sorted_values = sort(values,index.return=TRUE,decreasing=TRUE)
values = sorted_values$x
vectors = Q[,sorted_values$ix]
return(list(values=values, vectors= -vectors))
}
##########
set.seed(1234567890)
d =5
z = matrix(rnorm(d^d),d,d)
X = z + t(z)
# X
eigen_fun(X)
eigen(X)
Rlocal <- function(A){
d = ncol(X)
R <- A
Q <- diag(1,d,d,FALSE)
for (i in 1:(d-1)) {
X <- matrix(rep(0,d),nrow = d)
X[i:d] <- R[i:d,i]
V <- X
V[i] <- X[i]+norm(X,"F")*sign(X[i])
xlocal <- V/norm(V,"F")
R <- R-2*(xlocal%*%t(xlocal)%*%R)
Q <- Q-2*(xlocal%*%t(xlocal)%*%Q)
}
return(list("Q" = t(Q), "R" = R))
}
eigen_fun <- function(X, numIter = 1000){
d = ncol(X)
U = diag(1,d,d,FALSE)
for (i in 1:numIter) {
QR <- Rlocal(U)
Q = QR$Q
R = QR$R
U = X %*% Q
}
values = diag(R)
sorted_values = sort(values,index.return=TRUE,decreasing=TRUE)
values = sorted_values$x
vectors = Q[,sorted_values$ix]
return(list(values=values, vectors= -vectors))
}
##########
set.seed(1234567890)
d =3
z = matrix(rnorm(d^d),d,d)
X = z + t(z)
# X
eigen_fun(X)
eigen(X)
Rlocal <- function(A){
d = ncol(X)
R <- A
Q <- diag(1,d,d,FALSE)
for (i in 1:(d-1)) {
X <- matrix(rep(0,d),nrow = d)
X[i:d] <- R[i:d,i]
V <- X
V[i] <- X[i]+norm(X,"F")*sign(X[i])
xlocal <- V/norm(V,"F")
R <- R-2*(xlocal%*%t(xlocal)%*%R)
Q <- Q-2*(xlocal%*%t(xlocal)%*%Q)
}
return(list("Q" = t(Q), "R" = R))
}
eigen_fun <- function(X, numIter = 1000){
d = ncol(X)
U = diag(1,d,d,FALSE)
for (i in 1:numIter) {
QR <- Rlocal(U)
Q = QR$Q
R = QR$R
U = X %*% Q
}
values = diag(R)
sorted_values = sort(values,index.return=TRUE,decreasing=TRUE)
values = sorted_values$x
vectors = Q[,sorted_values$ix]
return(list(values=values, vectors= -vectors))
}
##########
set.seed(1234567890)
d =5
z = matrix(rnorm(d^d),d,d)
X = z + t(z)
eigen_fun(X)
eigen(X)
setwd("D:/hacxy/Downloads/Final Exam/Profiling Linear Regression")
source("final_q1.R")
set.seed(1234567890)
output = matrix(NA,5,20)
r_squared_fun_i = function(i,x,y){
if (i == 1){
r_squared_fun_1(x,y)
}
if (i ==2){
r_squared_fun_2(x,y)
}
if (i ==3){
r_squared_fun_3(x,y)
}
if (i ==4){
r_squared_fun_4(x,y)
}
if (i ==5){
r_squared_fun_5(x,y)
}
}
totaltime = function(i,x,y){
Rprof(filename='q.out',filter.callframes = TRUE,interval=0.01)
r_squared_fun_i(i,x,y)
Rprof(NULL)
summaryRprof('q.out')$by.total[1,1]
}
for (j in 1:20){
x = matrix(rnorm(1000*500),1000,500)
y = rnorm(1000)
for (i in 1:5){
output[i,j] = totaltime(i,x,y)
}
}
output
profiling_matrix <- output
f1 = summary(profiling_matrix[1,])
f2 = summary(profiling_matrix[2,])
f3 = summary(profiling_matrix[3,])
f4 = summary(profiling_matrix[4,])
f5 = summary(profiling_matrix[5,])
f = rbind(f1,f2,f3,f4,f5)
summary_matrix = as.matrix(f)
summary_matrix
setwd("D:/hacxy/Downloads/Final Exam/Profiling Linear Regression")
source("final_q1.R")
set.seed(1234567890)
output = matrix(NA,5,20)
r_squared_fun_i = function(i,x,y){
if (i == 1){
r_squared_fun_1(x,y)
}
if (i ==2){
r_squared_fun_2(x,y)
}
if (i ==3){
r_squared_fun_3(x,y)
}
if (i ==4){
r_squared_fun_4(x,y)
}
if (i ==5){
r_squared_fun_5(x,y)
}
}
totaltime = function(i,x,y){
Rprof(filename='q.out',filter.callframes = TRUE,interval=0.01)
r_squared_fun_i(i,x,y)
Rprof(NULL)
summaryRprof('q.out')$by.total[1,1]
}
for (j in 1:20){
x = matrix(rnorm(1000*500),1000,500)
y = rnorm(1000)
for (i in 1:5){
output[i,j] = totaltime(i,x,y)
}
}
output
profiling_matrix <- output
f1 = summary(profiling_matrix[1,])
f2 = summary(profiling_matrix[2,])
f3 = summary(profiling_matrix[3,])
f4 = summary(profiling_matrix[4,])
f5 = summary(profiling_matrix[5,])
f = rbind(f1,f2,f3,f4,f5)
summary_matrix = as.matrix(f)
summary_matrix
setwd("D:/hacxy/Downloads/Final Exam/Profiling Linear Regression")
source("final_q1.R")
set.seed(1234567890)
output = matrix(NA,5,20)
r_squared_fun_i = function(i,x,y){
if (i == 1){
r_squared_fun_1(x,y)
}
if (i ==2){
r_squared_fun_2(x,y)
}
if (i ==3){
r_squared_fun_3(x,y)
}
if (i ==4){
r_squared_fun_4(x,y)
}
if (i ==5){
r_squared_fun_5(x,y)
}
}
totaltime = function(i,x,y){
Rprof(filename='q.out',filter.callframes = TRUE,interval=0.01)
r_squared_fun_i(i,x,y)
Rprof(NULL)
summaryRprof('q.out')$by.total[1,1]
}
for (j in 1:20){
x = matrix(rnorm(1000*500),1000,500)
y = rnorm(1000)
for (i in 1:5){
output[i,j] = totaltime(i,x,y)
}
}
output
profiling_matrix <- output
f1 = summary(profiling_matrix[1,])
f2 = summary(profiling_matrix[2,])
f3 = summary(profiling_matrix[3,])
f4 = summary(profiling_matrix[4,])
f5 = summary(profiling_matrix[5,])
f = rbind(f1,f2,f3,f4,f5)
summary_matrix = as.matrix(f)
summary_matrix
